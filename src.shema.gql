# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type CarePackage {
  discription: String!
  id: ID!
  image: LinkImage!
  medicalFacilitiesId: String!
  name: String!
  price: Float!
  register: [Register!]
  typePackageId: String!
}

input CreateCustomerInput {
  fullname: String!
  userId: String!
}

input CreateDegreeInput {
  abbreviations: String!
  name: String!
}

input CreateDoctorInput {
  avatar: LinkImageInput
  degreeId: String
  email: String!
  facilitiesId: String
  idSpecialist: String
  name: String!
  numberPhone: String!
  userId: String
}

input CreateMedicalFacilitiesInput {
  adress: String!
  companyName: String!
  discription: String!
  email: String!
  image: LinkImageInput!
  lat: Float
  lng: Float
  numberPhone: String!
  userId: String!
}

input CreateMedicalSpecialtiesInput {
  discription: String!
  name: String!
}

input CreateProfileInput {
  address: String!
  customerId: String!
  dataOfBirth: DateTime!
  email: String!
  ethnic: String!
  fullname: String!
  gender: String!
  identity: String!
  job: String!
  medicalInsurance: String!
  numberPhone: String!
  relationship: String!
}

input CreateRegisterInput {
  date: DateTime!
  packegeId: String!
  profileId: String!
  state: String!
}

input CreateTypePackageInput {
  typeName: String!
}

input CreateUserInput {
  email: String!
  fullname: String!
  password: String!
  username: String!
}

type Customer {
  fullname: String
  id: ID!
  profile: [Profile!]!
  userId: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Degree {
  abbreviations: String!
  doctor: Doctor
  id: ID!
  name: String!
}

type Doctor {
  avatar: LinkImage!
  degree: Degree
  degreeId: String
  email: String!
  evaluate: Float
  facilitiesId: String
  id: ID!
  idSpecialist: String
  medicalSpecialties: MedicalSpecialties
  name: String!
  numberPhone: String!
  userId: String
}

type GeneralInfor {
  ID: String
  address: String!
  company: String!
  copyrigth: String!
  email: String!
  hotline: String!
  liscenceBusiness: String!
  liscenceOparating: String!
  logoFooter: LinkImage!
  logoHeader: LinkImage!
}

input GeneralInforUpdateInput {
  address: String!
  company: String!
  copyrigth: String!
  email: String!
  hotline: String!
  liscenceBusiness: String!
  liscenceOparating: String!
  logoFooter: LinkImageInput
  logoHeader: LinkImageInput
}

type LinkImage {
  filename: String!
  type: String!
  url: String!
}

input LinkImageInput {
  filename: String!
  type: String!
  url: String!
}

type LoginRespone {
  access_token: String!
  user: User!
}

input LoginUserInput {
  password: String!
  username: String!
}

type LogoutUser {
  logout: Boolean!
}

type MedicalFacilities {
  adress: String!
  carePackage: [CarePackage!]
  companyName: String!
  discription: String!
  doctors: [Doctor!]
  email: String!
  id: ID!
  image: LinkImage!
  lat: Float
  lng: Float
  numberPhone: String!
}

type MedicalSpecialties {
  discription: String!
  id: ID!
  name: String!
}

type Mutation {
  activeUser(id: String!): User!
  createCarePackage(input: createCarePackageInput!): CarePackage!
  createDegree(input: CreateDegreeInput!): Degree!
  createDoctor(createDoctorInput: CreateDoctorInput!): Doctor!
  createMecialSpecialties(mecicalSpecialtiesInput: CreateMedicalSpecialtiesInput!): MedicalSpecialties!
  createMedicalFacilities(createMedicalFacilitiesInput: CreateMedicalFacilitiesInput!): MedicalFacilities!
  createProfile(input: CreateProfileInput!): Profile!
  createRegister(input: CreateRegisterInput!): Register!
  createTypePackage(input: CreateTypePackageInput!): TypePackage!
  createcustomer(createCustomerInput: CreateCustomerInput!): Customer!
  deleteDegree(input: String!): Degree!
  deleteDoctor(id: String!): Doctor!
  deleteMecialSpecialties(id: String!): MedicalSpecialties!
  deleteTypePackage(id: String!): TypePackage!
  deleteUser(id: String!): User!
  login(loginUserInput: LoginUserInput!): LoginRespone!
  logout: LogoutUser!
  signup(createUserInput: CreateUserInput!): User!
  updateDegree(input: UpdateDegreeInput!): Degree!
  updateDoctor(updateDoctorInput: UpdateDoctorInput!): Doctor!
  updateGeneralInfor(updateGeneralInforInput: GeneralInforUpdateInput!): GeneralInfor!
  updateMecialSpecialties(updateSpecialtiesInput: UpdateMedicalSpecialtiesInput!): MedicalSpecialties!
  updateMedicalFacilities(createMedicalFacilitiesInput: UpdateMedicalFacilitiesInput!): MedicalFacilities!
  updateRoles(updateRolesInput: UpdateRolesInput!): User!
  updateSetting(updateSettingInput: UpdateSettingInput!): Setting!
  updateTypePackage(input: UpdateTypePackageInput!): TypePackage!
  updateUser(updateUserInput: UpdateUserInput!): User!
  updateUserWithPass(updateUserInput: UpdateUserWithPassInput!): User!
}

type Profile {
  address: String!
  customerId: String!
  dataOfBirth: DateTime!
  email: String!
  ethnic: String!
  fullname: String!
  gender: String!
  id: ID!
  identity: String
  job: String!
  medicalInsurance: String
  numberPhone: String!
  relationship: String!
}

type Query {
  checklogin: User!
  getAllDegree: [Degree!]!
  getAllMecialSpecialties: [MedicalSpecialties!]!
  getClinicById(id: String!): MedicalFacilities!
  getClinicByUserId(id: String!): MedicalFacilities!
  getDoctorbyId(id: String!): Doctor!
  getDoctorbyUserId(id: String!): Doctor!
  getDoctors: [Doctor!]!
  getGeneralInfor: GeneralInfor!
  getMedicalfacilities: [MedicalFacilities!]!
  getProfileByCustomerId(id: String!): [Profile!]!
  getSetting: Setting!
  getUser(username: String!): User!
  getUserMedicalNon: [User!]!
  getUserSelect(roleInput: UserSelectInput!): [User!]!
  getcustomers: [Customer!]!
  users: [User!]!
}

type Register {
  carePackage: CarePackage
  date: DateTime!
  id: ID!
  packegeId: String!
  profileId: String!
  state: String!
}

type Setting {
  defaultLang: String!
}

type TypePackage {
  carePackage: [CarePackage!]
  id: ID!
  typeName: String!
}

input UpdateDegreeInput {
  abbreviations: String!
  id: String!
  name: String!
}

input UpdateDoctorInput {
  avatar: LinkImageInput
  degreeId: String
  email: String!
  facilitiesId: String
  id: String!
  idSpecialist: String
  name: String!
  numberPhone: String!
  userId: String
}

input UpdateMedicalFacilitiesInput {
  adress: String!
  companyName: String!
  discription: String!
  email: String!
  id: String!
  image: LinkImageInput
  lat: Float
  lng: Float
  numberPhone: String!
  userId: String!
}

input UpdateMedicalSpecialtiesInput {
  discription: String!
  id: String!
  name: String!
}

input UpdateRolesInput {
  id: String!
  roles: [String!]!
}

input UpdateSettingInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input UpdateTypePackageInput {
  id: String!
  typeName: String!
}

input UpdateUserInput {
  active: Boolean
  email: String
  id: String!
  linkImage: LinkImageInput
  username: String
}

input UpdateUserWithPassInput {
  active: Boolean
  email: String!
  id: String!
  linkImage: LinkImageInput
  password: String!
  passwordNew: String!
  username: String!
}

type User {
  active: Boolean
  customer: Customer
  doctor: Doctor
  email: String!
  id: ID!
  linkImage: LinkImage
  medicalFacilities: MedicalFacilities
  password: String!
  roles: [String!]
  username: String!
}

input UserSelectInput {
  role: String!
}

input createCarePackageInput {
  discription: String!
  image: LinkImageInput!
  medicalFacilitiesId: String!
  name: String!
  price: Float!
  typePackageId: String!
}