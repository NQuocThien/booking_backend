# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input ConfirmRegisterInput {
  registerId: String!
  state: EStateRegister!
}

input CreateCustomerInput {
  address: String!
  dateOfBirth: DateTime!
  email: String!
  ethnic: String!
  gender: EGender!
  name: String!
  numberPhone: String!
  userId: String!
}

input CreateDoctorInput {
  academicTitle: EAcademicTitle
  avatar: LinkImageInput!
  degree: EDegree!
  discription: String!
  email: String!
  gender: EGender!
  medicalFactilitiesId: String!
  name: String!
  numberPhone: String!
  price: Float!
  specialistId: String!
  userId: String!
  workSchedule: WorkScheduleInput!
}

input CreateEvaluateInput {
  comment: String!
  rating: Float!
  registerId: String!
  userId: String!
}

input CreateMedicalFacilityInput {
  address: String!
  dateOff: [DateTime!]
  discription: String!
  email: String!
  image: LinkImageInput!
  introduce: String!
  lat: Float
  legalRepresentation: String!
  lng: Float
  logo: LinkImageInput!
  medicalFacilityName: String!
  numberPhone: String!
  operatingStatus: String!
  schedule: String!
  status: String!
  taxCode: String!
  typeOfFacility: ETypeOfFacility!
  userId: String!
}

input CreateMedicalSpecialtyInput {
  discription: String!
  medicalFactilityId: String!
  name: String!
  price: Float!
  workSchedule: WorkScheduleInput
}

input CreateMedicalStaffInput {
  email: String!
  gender: EGender!
  medicalFacilityId: String!
  name: String!
  numberPhone: String!
  permissions: [EPermission!]!
  specialtyId: [String!]
  userId: String!
}

input CreateNotificationInput {
  content: String!
  detailPath: String!
  status: ETypeOfNotification!
  userId: String!
}

input CreatePackageInput {
  examinationDetails: String!
  gender: EGenderPackage!
  image: LinkImageInput!
  medicalFactilitiesId: String!
  packageName: String!
  price: Float!
  workSchedule: WorkScheduleInput!
}

input CreateProfileInput {
  address: String!
  customerId: String!
  dataOfBirth: DateTime!
  email: String!
  ethnic: String!
  fullname: String!
  gender: EGender!
  identity: String!
  job: String!
  medicalInsurance: String!
  numberPhone: String!
  relationship: String!
}

input CreateRegisterDoctorInput {
  date: DateTime!
  doctorId: String!
  isHealthInsurance: Boolean!
  profileId: String!
  session: SessionInput!
}

input CreateRegisterPackageInput {
  date: DateTime!
  isHealthInsurance: Boolean!
  packageId: String!
  profileId: String!
  sessionId: String!
}

input CreateRegisterSpecialtyInput {
  date: DateTime!
  isHealthInsurance: Boolean!
  profileId: String!
  sessionId: String!
  specialtyId: String!
}

input CreateRegisterVaccineInput {
  date: DateTime!
  isHealthInsurance: Boolean!
  profileId: String!
  sessionId: String!
  vaccineId: String!
}

input CreateUserByAdminInput {
  email: String!
  password: String!
  username: String!
}

input CreateUserInput {
  email: String!
  fullname: String!
  password: String!
  username: String!
}

input CreateVaccineInput {
  countryOfOrigin: String!
  indication: String!
  medicalFactilitiesId: String!
  note: String!
  price: Float!
  prophylactic: String!
  vaccineName: String!
  workSchedule: WorkScheduleInput!
}

type Customer {
  address: String!
  dateOfBirth: DateTime!
  email: String!
  ethnic: String!
  gender: String!
  id: ID!
  name: String!
  numberPhone: String!
  profiles: [Profile!]
  userId: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Doctor {
  academicTitle: String
  avatar: LinkImage!
  degree: String!
  discription: String!
  email: String!
  gender: String!
  id: ID!
  medicalFactilitiesId: String!
  name: String!
  numberPhone: String!
  price: Float!
  specialistId: String!
  specialty: MedicalSpecialties
  userId: String!
  workSchedule: WorkSchedule!
}

enum EAcademicTitle {
  AssociateProfesso
  Professor
}

enum EDayOfWeed {
  Friday
  Monday
  Saturday
  Sunday
  Thursday
  Tuesday
  Wednesday
}

enum EDegree {
  Doctor
  DoctorS1
  DoctorS2
  Doctorate
  MasterDoctor
}

enum EGender {
  Female
  Male
}

enum EGenderPackage {
  Both
  Female
  Male
}

enum EPermission {
  Magager
  MagagerBlog
  MagagerPackage
  MagagerVaccine
  ManagerSpecialty
}

enum EStateRegister {
  Pending
  Success
}

enum EStatusService {
  Close
  Open
}

enum ETypeOfFacility {
  clinic
  privateHospital
  publicHospital
  vaccinationCenter
}

enum ETypeOfNotification {
  NotSeen
  Seen
}

type Evaluate {
  comment: String!
  id: ID!
  rating: Float!
  registerId: String!
  userId: String!
}

input FilterDoctorInput {
  academicTitle: EAcademicTitle
  degree: EDegree
  gender: EGender
  name: String
  specialistId: String
}

type GeneralInfor {
  ID: String
  address: String!
  company: String!
  copyrigth: String!
  email: String!
  hotline: String!
  liscenceBusiness: String!
  liscenceOparating: String!
  logoFooter: LinkImage!
  logoHeader: LinkImage!
}

input GeneralInforUpdateInput {
  address: String!
  company: String!
  copyrigth: String!
  email: String!
  hotline: String!
  liscenceBusiness: String!
  liscenceOparating: String!
  logoFooter: LinkImageInput
  logoHeader: LinkImageInput
}

input GetRegisterByOptionInput {
  date: DateTime!
  doctorId: String
  packageId: String
  specialtyId: String
  vaccineId: String
}

type LinkImage {
  filename: String!
  type: String!
  url: String!
}

input LinkImageInput {
  filename: String!
  type: String!
  url: String!
}

type LoginRespone {
  access_token: String!
  user: User!
}

input LoginUserInput {
  password: String!
  username: String!
}

type LogoutUser {
  logout: Boolean!
}

type MedicalFacilities {
  address: String!
  dateOff: [DateTime!]
  discription: String!
  doctors: [Doctor!]
  email: String!
  id: ID!
  image: LinkImage!
  introduce: String!
  lat: Float
  legalRepresentation: String!
  lng: Float
  logo: LinkImage!
  medicalFacilityName: String!
  medicalSpecialties: [MedicalSpecialties!]
  medicalStaffs: [MedicalStaff!]
  numberPhone: String!
  operatingStatus: String!
  packages: [Package!]
  schedule: String!
  status: String!
  taxCode: String!
  totalDoctors: Float
  totalPackages: Float
  totalSpecialties: Float
  totalVaccinations: Float
  typeOfFacility: String!
  userId: String!
  vaccinations: [Vaccination!]
}

type MedicalSpecialties {
  discription: String!
  id: ID!
  medicalFactilityId: String!
  name: String!
  price: Float!
  workSchedule: WorkSchedule
}

type MedicalStaff {
  email: String!
  gender: String!
  id: ID!
  medicalFacilityId: String!
  name: String!
  numberPhone: String!
  permissions: [String!]!
  specialties: [MedicalSpecialties!]
  specialtyId: [String!]
  userId: String!
}

type Mutation {
  activeUser(id: String!): User!
  confirmRegister(input: ConfirmRegisterInput!): Register!
  createCustomer(input: CreateCustomerInput!): Customer!
  createDoctor(createDoctorInput: CreateDoctorInput!): Doctor!
  createEvaluate(input: CreateEvaluateInput!): Evaluate!
  createMedicalFacility(input: CreateMedicalFacilityInput!): MedicalFacilities!
  createMedicalSpecialty(input: CreateMedicalSpecialtyInput!): MedicalSpecialties!
  createMedicalStaff(input: CreateMedicalStaffInput!): MedicalStaff!
  createNotifition(input: CreateNotificationInput!): Notification!
  createPackage(input: CreatePackageInput!): Package!
  createProfile(input: CreateProfileInput!): Profile!
  createRegisterDoctor(input: CreateRegisterDoctorInput!): Register!
  createRegisterPackage(input: CreateRegisterPackageInput!): Register!
  createRegisterSpecialty(input: CreateRegisterSpecialtyInput!): Register!
  createRegisterVaccine(input: CreateRegisterVaccineInput!): Register!
  createVaccination(input: CreateVaccineInput!): Vaccination!
  deleteDoctor(id: String!): Doctor!
  deleteEvaluate(id: String!): Evaluate!
  deleteMecialSpecialty(id: String!): MedicalSpecialties!
  deleteMedicalFacility(input: String!): MedicalFacilities!
  deleteMedicalStaff(input: String!): MedicalStaff!
  deleteNotification(id: String!): Notification!
  deletePackage(input: String!): Package!
  deleteProfile(id: String!): Profile!
  deleteUser(id: String!): User!
  deleteVaccination(input: String!): Vaccination!
  login(loginUserInput: LoginUserInput!): LoginRespone!
  logout: LogoutUser!
  signup(createUserInput: CreateUserInput!): User!
  signupUser(createUserInput: CreateUserByAdminInput!): User!
  updateCustomer(input: UpdateCustomerInput!): Customer!
  updateDoctor(input: UpdateDoctorInput!): Doctor!
  updateEvaluate(input: UpdateEvaluateInput!): Evaluate!
  updateGeneralInfor(updateGeneralInforInput: GeneralInforUpdateInput!): GeneralInfor!
  updateMedicalFacility(input: UpdateMedicalFacilityInput!): MedicalFacilities!
  updateMedicalSpecialty(input: UpdateMedicalSpecialtyInput!): MedicalSpecialties!
  updateMedicalStaff(input: UpdateMedicalStaffInput!): MedicalStaff!
  updateNotification(input: UpdateNotificationInput!): Notification!
  updatePackage(input: UpdatePackageInput!): Package!
  updateProfile(input: UpdateProfileInput!): Profile!
  updateRegister(input: UpdateRegisterInput!): Register!
  updateRoles(updateRolesInput: UpdateRolesInput!): User!
  updateSetting(updateSettingInput: UpdateSettingInput!): Setting!
  updateUser(updateUserInput: UpdateUserInput!): User!
  updateUserWithPass(updateUserInput: UpdateUserWithPassInput!): User!
  updateVaccination(input: UpdateVaccineInput!): Vaccination!
}

type Notification {
  content: String!
  detailPath: String!
  id: ID!
  status: ETypeOfNotification!
  userId: String!
}

type Package {
  examinationDetails: String!
  gender: String!
  id: ID!
  image: LinkImage!
  medicalFactilitiesId: String!
  packageName: String!
  price: Float!
  workSchedule: WorkSchedule!
}

type Profile {
  address: String!
  customer: Customer
  customerId: String!
  dataOfBirth: DateTime!
  email: String!
  ethnic: String!
  fullname: String!
  gender: String!
  id: ID!
  identity: String
  job: String!
  medicalInsurance: String
  numberPhone: String!
  register: [Register!]
  relationship: String!
}

type Query {
  checklogin: User!
  checkloginCustomer: User!
  getAllCustomer: [Customer!]!
  getAllCustomerPagination(limit: Float! = 10, page: Float! = 1, search: String, sortField: String = "name", sortOrder: String): [Customer!]!
  getAllDoctor: [Doctor!]!
  getAllDoctorByFacilityId(input: String!): [Doctor!]!
  getAllDoctorPagination(limit: Float! = 10, page: Float! = 1, search: String, sortField: String = "name", sortOrder: String): [Doctor!]!
  getAllDoctorPaginationOfFacility(filter: FilterDoctorInput, limit: Float! = 10, page: Float! = 1, sortField: String = "name", sortOrder: String, staffId: String = "", userId: String = ""): [Doctor!]!
  getAllDoctorPending: [Doctor!]!
  getAllEvaluate: [Evaluate!]!
  getAllMecialSpecialty: [MedicalSpecialties!]!
  getAllMedicalFacility: [MedicalFacilities!]!
  getAllMedicalFacilityPagination(limit: Float! = 10, page: Float! = 1, search: String, sortField: String = "medicalFacilityName", sortOrder: String): [MedicalFacilities!]!
  getAllMedicalSpecialtiesPaginationByStaff(limit: Float! = 10, page: Float! = 1, search: String, sortField: String = "name", sortOrder: String, staffId: String!): [MedicalSpecialties!]!
  getAllMedicalSpecialtiesPaginationOfFacility(limit: Float! = 10, page: Float! = 1, search: String, sortField: String = "name", sortOrder: String, staffId: String = "", userId: String = ""): [MedicalSpecialties!]!
  getAllMedicalStaff: [MedicalStaff!]!
  getAllMedicalStaffPaginationOfFacility(limit: Float! = 10, page: Float! = 1, search: String, sortField: String = "name", sortOrder: String, userId: String): [MedicalStaff!]!
  getAllNotification: [Notification!]!
  getAllPackage: [Package!]!
  getAllPackageByFacilityId(input: String!): [Package!]!
  getAllPackagePaginationByStaff(limit: Float! = 10, page: Float! = 1, search: String, sortField: String = "packageName", sortOrder: String, staffId: String): [Package!]!
  getAllPackagePaginationOfFacility(limit: Float! = 10, page: Float! = 1, search: String, sortField: String = "packageName", sortOrder: String, staffId: String = "", userId: String = ""): [Package!]!
  getAllPackageSelect(input: String!): [Package!]!
  getAllProfile: [Profile!]!
  getAllRegisterByOption(input: GetRegisterByOptionInput!): [Register!]!
  getAllStaffPagination(limit: Float! = 10, page: Float! = 1, search: String, sortField: String = "name", sortOrder: String): [MedicalStaff!]!
  getAllUsersPagination(limit: Float! = 10, page: Float! = 1, search: String, sortField: String = "username", sortOrder: String): [User!]!
  getAllVacation: [Vaccination!]!
  getAllVaccinationByFacilityId(input: String!): [Vaccination!]!
  getAllVaccinationPaginationByStaff(limit: Float! = 10, page: Float! = 1, search: String, sortField: String = "name", sortOrder: String, staffId: String): [Vaccination!]!
  getAllVaccinationPaginationOfFacility(limit: Float! = 10, page: Float! = 1, search: String, sortField: String = "vaccineName", sortOrder: String, staffId: String = "", userId: String = ""): [Vaccination!]!
  getAllVaccinationSelect(input: String!): [Vaccination!]!
  getDoctorbyId(id: String!): Doctor!
  getDoctorbyUserId(id: String!): Doctor!
  getEvaluateById(id: String!): Evaluate!
  getGeneralInfor: GeneralInfor!
  getMedicalFacilityById(id: String!): MedicalFacilities!
  getMedicalFacilityInfo(staffId: String = "", userId: String = ""): MedicalFacilities!
  getMedicalSpecialtiesByMedicalFacilityId(input: String!): [MedicalSpecialties!]!
  getMedicalSpecialtyById(input: String!): MedicalSpecialties!
  getMedicalSpecialtySelect(input: String!): [MedicalSpecialties!]!
  getMedicalStaffByFacilityId(input: String!): [MedicalStaff!]!
  getMedicalStaffById(input: String!): MedicalStaff!
  getMedicalStaffByUserId(input: String!): MedicalStaff!
  getPackageById(input: String!): Package!
  getProfileByCustomerId(id: String!): [Profile!]!
  getSetting: Setting!
  getTotalCustomersCount(search: String): Float!
  getTotalDoctorsCount(filter: FilterDoctorInput, staffId: String = "", userId: String = ""): Float!
  getTotalFacilitiesCount(search: String): Float!
  getTotalMedicalSpecialtiesCount(search: String, staffId: String = "", userId: String = ""): Float!
  getTotalPackagesCount(search: String, staffId: String = "", userId: String = ""): Float!
  getTotalVaccinationsCount(search: String, staffId: String = "", userId: String = ""): Float!
  getUser(username: String!): User!
  getUserDoctorPending: [User!]!
  getUserDoctorPendingUpdate(input: String!): [User!]!
  getUserFacilitySelect(input: String!): [User!]!
  getUserMedicalNon: [User!]!
  getUserSelect(roleInput: UserSelectInput!): [User!]!
  getUserSelected(id: String!): User!
  getUserStaffSelect(input: String!): [User!]!
  getVaccineById(input: String!): Vaccination!
  totalStaffsCount(search: String, userId: String = ""): Float!
  totalUsersCount(search: String): Float!
  users: [User!]!
}

type Register {
  date: DateTime!
  doctorId: String
  id: ID!
  isHealthInsurance: Boolean!
  packageId: String
  profile: Profile!
  profileId: String!
  session: Session!
  specialtyId: String
  state: String!
  typeOfService: String!
  vaccineId: String
}

enum Role {
  Admin
  Customer
  Doctor
  Facility
  Staff
  User
}

type Schedule {
  dayOfWeek: String!
  sessions: [Session!]!
}

input ScheduleInput {
  dayOfWeek: EDayOfWeed!
  sessions: [SessionInput!]!
}

type Session {
  endTime: String!
  startTime: String!
}

input SessionInput {
  endTime: String!
  startTime: String!
}

type Setting {
  defaultLang: String!
}

input UpdateCustomerInput {
  address: String!
  dateOfBirth: DateTime!
  email: String!
  ethnic: String!
  gender: EGender!
  id: String!
  name: String!
  numberPhone: String!
}

input UpdateDoctorInput {
  academicTitle: EAcademicTitle
  avatar: LinkImageInput!
  degree: EDegree!
  discription: String!
  email: String!
  gender: EGender!
  id: String!
  medicalFactilitiesId: String!
  name: String!
  numberPhone: String!
  price: Float!
  specialistId: String!
  userId: String!
  workSchedule: WorkScheduleInput!
}

input UpdateEvaluateInput {
  comment: String!
  id: String!
  rating: Float!
  registerId: String!
  userId: String!
}

input UpdateMedicalFacilityInput {
  address: String!
  dateOff: [DateTime!]
  discription: String!
  email: String!
  id: String!
  image: LinkImageInput!
  introduce: String!
  lat: Float
  legalRepresentation: String!
  lng: Float
  logo: LinkImageInput!
  medicalFacilityName: String!
  numberPhone: String!
  operatingStatus: String!
  schedule: String!
  status: String!
  taxCode: String!
  typeOfFacility: ETypeOfFacility!
  userId: String!
}

input UpdateMedicalSpecialtyInput {
  discription: String!
  id: String!
  medicalFactilityId: String!
  name: String!
  price: Float!
  workSchedule: WorkScheduleInput
}

input UpdateMedicalStaffInput {
  email: String!
  gender: EGender!
  id: String!
  medicalFacilityId: String!
  name: String!
  numberPhone: String!
  permissions: [EPermission!]!
  specialtyId: [String!]
  userId: String!
}

input UpdateNotificationInput {
  content: String!
  detailPath: String!
  id: String!
  status: ETypeOfNotification!
  userId: String!
}

input UpdatePackageInput {
  examinationDetails: String!
  gender: EGenderPackage!
  id: String!
  image: LinkImageInput!
  medicalFactilitiesId: String!
  packageName: String!
  price: Float!
  workSchedule: WorkScheduleInput!
}

input UpdateProfileInput {
  address: String
  dataOfBirth: DateTime
  email: String
  ethnic: String
  fullname: String
  gender: EGender!
  id: String!
  identity: String
  job: String
  medicalInsurance: String
  numberPhone: String
  relationship: String
}

input UpdateRegisterInput {
  id: String!
  state: EStateRegister!
}

input UpdateRolesInput {
  id: String!
  roles: [Role!]!
}

input UpdateSettingInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input UpdateUserInput {
  active: Boolean
  email: String
  id: String!
  linkImage: LinkImageInput
  username: String
}

input UpdateUserWithPassInput {
  active: Boolean
  email: String!
  id: String!
  linkImage: LinkImageInput!
  password: String!
  passwordNew: String!
  username: String!
}

input UpdateVaccineInput {
  countryOfOrigin: String!
  id: String!
  indication: String!
  medicalFactilitiesId: String!
  note: String!
  price: Float!
  prophylactic: String!
  vaccineName: String!
  workSchedule: WorkScheduleInput!
}

type User {
  active: Boolean
  customer: Customer
  doctor: Doctor
  email: String!
  id: ID!
  linkImage: LinkImage!
  medicalFacilities: MedicalFacilities
  password: String!
  roles: [String!]
  username: String!
}

input UserSelectInput {
  role: Role!
}

type Vaccination {
  countryOfOrigin: String!
  id: ID!
  indication: String!
  medicalFactilitiesId: String!
  note: String!
  price: Float!
  prophylactic: String!
  vaccineName: String!
  workSchedule: WorkSchedule!
}

type WorkSchedule {
  dayOff: [DateTime!]!
  numberSlot: Float!
  schedule: [Schedule!]!
  status: String!
}

input WorkScheduleInput {
  dayOff: [DateTime!]!
  numberSlot: Float!
  schedule: [ScheduleInput!]!
  status: EStatusService!
}