# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input CertificateInput {
  associationName: String!
  dateEnd: DateTime
  dateStart: DateTime!
  description: String!
  name: String!
  state: Boolean
}

input CreateProfileInput {
  certificate: CertificateInput
  education: EducationInput
  experience: ExperienceInput
  introduce: String
  prize: PrizeInput
  skills: String
  userId: String!
}

input CreateUserInput {
  email: String!
  fullname: String!
  password: String!
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input EducationInput {
  dateEnd: DateTime
  dateStart: DateTime!
  description: String
  major: String!
  schoolName: String!
  state: Boolean!
}

input ExperienceInput {
  companyName: String!
  dateEnd: DateTime
  dateStart: DateTime!
  description: String
  position: String!
  state: Boolean
}

type GeneralInfor {
  ID: String
  address: String!
  company: String!
  copyrigth: String!
  email: String!
  hotline: String!
  liscenceBusiness: String!
  liscenceOparating: String!
  logoFooter: LinkImage!
  logoHeader: LinkImage!
}

input GeneralInforUpdateInput {
  address: String!
  company: String!
  copyrigth: String!
  email: String!
  hotline: String!
  liscenceBusiness: String!
  liscenceOparating: String!
  logoFooter: LinkImageInput
  logoHeader: LinkImageInput
}

type LinkImage {
  filename: String!
  type: String!
  url: String!
}

input LinkImageInput {
  filename: String!
  type: String!
  url: String!
}

type LoginRespone {
  access_token: String!
  user: User!
}

input LoginUserInput {
  password: String!
  username: String!
}

type LogoutUser {
  logout: Boolean!
}

type Mutation {
  createProfile(createProfileInput: CreateProfileInput!): Profile!
  deleteUser(id: String!): User!
  login(loginUserInput: LoginUserInput!): LoginRespone!
  logout: LogoutUser!
  removeProfile(id: Int!): Profile!
  signup(createUserInput: CreateUserInput!): User!
  updateGeneralInfor(updateGeneralInforInput: GeneralInforUpdateInput!): GeneralInfor!
  updateProfile(updateProfileInput: UpdateProfileInput!): Profile!
  updateSetting(updateSettingInput: UpdateSettingInput!): Setting!
  updateUser(updateUserInput: UpdateUserInput!): User!
  updateUserWithPass(updateUserInput: UpdateUserWithPassInput!): User!
}

input PrizeInput {
  associationName: String!
  date: DateTime!
  description: String!
  name: String!
}

type Profile {
  id: ID!
  introduce: String
  skills: String
  skills1: String
  user: [User!]
  userId: String!
}

type Query {
  checklogin: User!
  getAllProfile: [Profile!]!
  getGeneralInfor: GeneralInfor!
  getSetting: Setting!
  getUser(username: String!): User!
  users: [User!]!
}

type Setting {
  defaultLang: String!
}

input UpdateProfileInput {
  certificate: CertificateInput
  education: EducationInput
  experience: ExperienceInput
  id: Int!
  introduce: String
  prize: PrizeInput
  skills: String
  userId: String
}

input UpdateSettingInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input UpdateUserInput {
  email: String!
  fullname: String!
  id: String!
  linkImage: LinkImageInput
  type: Float!
  username: String!
}

input UpdateUserWithPassInput {
  email: String!
  fullname: String!
  id: String!
  linkImage: LinkImageInput
  password: String!
  passwordNew: String!
  type: Float!
  username: String!
}

type User {
  email: String!
  fullname: String!
  id: ID!
  linkImage: LinkImage
  password: String!
  profile: Profile
  roles: [String!]
  type: Float!
  username: String!
}