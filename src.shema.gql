# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Blocks {
  content: String!
  customerId: String!
  seen: Boolean!
}

type Blog {
  content: String!
  createdAt: Float!
  createdBy: UserSlimEntity!
  deletedAt: Float
  deletedBy: UserSlimEntity
  id: ID!
  keywords: String!
  mainPhoto: LinkImage!
  priority: Float!
  shortContent: String!
  slug: String!
  status: String!
  title: String!
  type: String!
  updatedAt: Float
  updatedBy: UserSlimEntity
}

input ConfirmRegisterInput {
  note: String
  registerId: String!
  state: EStateRegister!
}

input CreatUserAndStaffInput {
  email: String!
  gender: EGender!
  medicalFacilityId: String!
  numberPhone: String!
  password: String!
  permissions: [EPermission!]!
  specialtyId: [String!]
  staffName: String!
  username: String!
}

input CreateBlogInput {
  content: String!
  keywords: String!
  mainPhoto: LinkImageInput!
  priority: Float!
  shortContent: String!
  slug: String!
  status: EnumBlogStatus!
  title: String!
  type: EnumBlogType!
}

input CreateCustomerInput {
  address: String!
  dateOfBirth: DateTime!
  email: String!
  ethnic: String!
  fullname: String!
  gender: EGender!
  numberPhone: String!
  userId: String!
}

input CreateDoctorAndUserInput {
  academicTitle: EAcademicTitle
  avatar: LinkImageInput!
  degree: EDegree!
  discription: String!
  doctorName: String!
  email: String!
  gender: EGender!
  medicalFactilitiesId: String!
  numberPhone: String!
  password: String!
  price: Float!
  specialistId: String!
  username: String!
  workSchedule: WorkScheduleInput!
}

input CreateDoctorInput {
  academicTitle: EAcademicTitle
  avatar: LinkImageInput!
  degree: EDegree!
  discription: String!
  doctorName: String!
  email: String!
  gender: EGender!
  medicalFactilitiesId: String!
  numberPhone: String!
  price: Float!
  specialistId: String!
  userId: String!
  workSchedule: WorkScheduleInput!
}

input CreateEvaluateInput {
  comment: String!
  customerName: String!
  doctorId: String
  packageId: String
  rating: Float!
  registerId: String!
  specialtyId: String
  typeOfService: ETypeOfService!
  userId: String!
  vaccineId: String
}

input CreateMedicalFacilityInput {
  address: String!
  dateOff: [DateTime!]
  discription: String!
  email: String!
  image: LinkImageInput!
  introduce: String!
  lat: Float
  legalRepresentation: String!
  lng: Float
  logo: LinkImageInput!
  medicalFacilityName: String!
  numberPhone: String!
  operatingStatus: String!
  schedule: String!
  status: EStatusService!
  taxCode: String!
  typeOfFacility: ETypeOfFacility!
  userId: String!
}

input CreateMedicalSpecialtyInput {
  discription: String!
  medicalFactilityId: String!
  price: Float!
  specialtyName: String!
  workSchedule: WorkScheduleInput
}

input CreateMedicalStaffInput {
  email: String!
  gender: EGender!
  medicalFacilityId: String!
  numberPhone: String!
  permissions: [EPermission!]!
  specialtyId: [String!]
  staffName: String!
  userId: String!
}

input CreateNotificationInput {
  content: String!
  detailPath: String!
  userId: String!
}

input CreatePackageInput {
  examinationDetails: String!
  gender: EGenderPackage!
  image: LinkImageInput!
  medicalFactilitiesId: String!
  packageName: String!
  price: Float!
  workSchedule: WorkScheduleInput!
}

input CreateProfileInput {
  address: String!
  customerId: String!
  dataOfBirth: DateTime!
  email: String!
  ethnic: String!
  fullname: String!
  gender: EGender!
  identity: String!
  job: String!
  medicalInsurance: String!
  numberPhone: String!
  relationship: String!
}

input CreateRegisterDoctorInput {
  createBy: String
  date: DateTime!
  doctorId: String!
  profileId: String!
  session: SessionInput!
}

input CreateRegisterPackageInput {
  createBy: String
  date: DateTime!
  packageId: String!
  profileId: String!
  session: SessionInput!
}

input CreateRegisterSpecialtyInput {
  createBy: String
  date: DateTime!
  profileId: String!
  session: SessionInput!
  specialtyId: String!
}

input CreateRegisterVaccineInput {
  createBy: String
  date: DateTime!
  profileId: String!
  session: SessionInput!
  vaccineId: String!
}

input CreateUserByAdminInput {
  email: String!
  password: String!
  username: String!
}

input CreateUserInput {
  email: String!
  password: String!
  username: String!
}

input CreateVaccineInput {
  countryOfOrigin: String!
  indication: String!
  medicalFactilitiesId: String!
  note: String!
  price: Float!
  prophylactic: String!
  vaccineName: String!
  workSchedule: WorkScheduleInput!
}

type Customer {
  address: String!
  customerKey: String!
  dateOfBirth: DateTime!
  email: String!
  ethnic: String!
  fullname: String!
  gender: String!
  id: ID!
  numberPhone: String!
  profileShares: [Profile!]
  profiles: [Profile!]
  userId: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Doctor {
  academicTitle: String
  avatar: LinkImage!
  degree: String!
  discription: String!
  doctorName: String!
  email: String!
  facility: MedicalFacilities
  gender: String!
  id: ID!
  medicalFactilitiesId: String!
  numberPhone: String!
  price: Float!
  registerCount(endTime: String!, isCancel: Boolean = false, isPending: Boolean = false, missed: Boolean = false, startTime: String!): Float
  specialistId: String!
  specialty: MedicalSpecialties
  userId: String!
  workSchedule: WorkSchedule!
}

enum EAcademicTitle {
  AssociateProfesso
  Professor
}

enum EDayOfWeed {
  Friday
  Monday
  Saturday
  Sunday
  Thursday
  Tuesday
  Wednesday
}

enum EDegree {
  Doctor
  DoctorS1
  DoctorS2
  Doctorate
  MasterDoctor
}

enum EGender {
  Female
  Male
}

enum EGenderPackage {
  Both
  Female
  Male
}

enum EPermission {
  Magager
  MagagerPackage
  MagagerPending
  MagagerVaccine
  ManagerSpecialty
}

enum EStateRegister {
  Approved
  Pending
  Success
}

enum EStatusService {
  Close
  Open
}

enum ETypeOfFacility {
  clinic
  privateHospital
  publicHospital
  vaccinationCenter
}

enum ETypeOfNotification {
  NotSeen
  Seen
}

enum ETypeOfService {
  Doctor
  Package
  Specialty
  Vaccine
}

enum EnumBlogStatus {
  Deleted
  NotPublic
  Public
}

enum EnumBlogType {
  Health
  Medical
  Service
}

type Evaluate {
  comment: String!
  createdAt: Float!
  customerName: String!
  doctorId: String
  id: ID!
  packageId: String
  rating: Float!
  registerId: String!
  specialtyId: String
  typeOfService: String!
  updatedAt: Float
  userId: String!
  vaccineId: String
}

type Exception {
  dates: [DateTime!]!
  numbeSlot: Float
  open: Boolean!
}

input ExceptionInput {
  dates: [DateTime!]!
  numbeSlot: Float
  open: Boolean!
}

input FilterDoctorInput {
  academicTitle: EAcademicTitle
  degree: EDegree
  doctorName: String
  gender: EGender
  specialistId: String
}

type GeneralInfor {
  ID: String
  address: String!
  company: String!
  copyrigth: String!
  email: String!
  hotline: String!
  liscenceBusiness: String!
  liscenceOparating: String!
  logoFooter: LinkImage!
  logoHeader: LinkImage!
}

input GeneralInforUpdateInput {
  address: String!
  company: String!
  copyrigth: String!
  email: String!
  hotline: String!
  liscenceBusiness: String!
  liscenceOparating: String!
  logoFooter: LinkImageInput
  logoHeader: LinkImageInput
}

input GetEvaluateOptionInput {
  doctorId: String
  packageId: String
  specialtyId: String
  vaccineId: String
}

input GetRegisPendingInput {
  cancel: Boolean!
  endTime: String!
  facilityIdFromStaff: String
  startTime: String!
  typeOfService: ETypeOfService
  userId: String
}

input GetRegisterByOptionInput {
  date: DateTime!
  doctorId: String
  packageId: String
  pedding: Boolean
  specialtyId: String
  vaccineId: String
}

input GetRegisterHaveInput {
  date: DateTime!
  serviceId: String!
  type: ETypeOfService!
}

type LinkImage {
  filename: String!
  type: String!
  url: String!
}

input LinkImageInput {
  filename: String!
  type: String!
  url: String!
}

type LoginRespone {
  access_token: String!
  user: User!
}

input LoginUserInput {
  password: String!
  username: String!
}

type LogoutUser {
  logout: Boolean!
}

type MedicalFacilities {
  address: String!
  blocks: [Blocks!]
  dateOff: [DateTime!]
  discription: String!
  doctors(isClient: Boolean = false): [Doctor!]
  email: String!
  id: ID!
  image: LinkImage!
  introduce: String!
  lat: Float
  legalRepresentation: String!
  lng: Float
  logo: LinkImage!
  medicalFacilityName: String!
  medicalSpecialties(isClient: Boolean = false): [MedicalSpecialties!]
  medicalStaffs: [MedicalStaff!]
  numberPhone: String!
  operatingStatus: String!
  packages(isClient: Boolean = false): [Package!]
  schedule: String!
  status: String!
  taxCode: String!
  totalDoctors(isClient: Boolean = false): Float
  totalPackages(isClient: Boolean = false): Float
  totalSpecialties(isClient: Boolean = false): Float
  totalVaccinations(isClient: Boolean = false): Float
  typeOfFacility: String!
  userId: String!
  vaccinations(isClient: Boolean = false): [Vaccination!]
}

type MedicalSpecialties {
  discription: String!
  facility: MedicalFacilities
  id: ID!
  medicalFactilityId: String!
  price: Float!
  registerCount(endTime: String!, isCancel: Boolean = false, isPending: Boolean = false, missed: Boolean = false, startTime: String!): Float
  specialtyName: String!
  workSchedule: WorkSchedule
}

type MedicalStaff {
  email: String!
  gender: String!
  id: ID!
  medicalFacilityId: String!
  numberPhone: String!
  permissions: [String!]!
  specialties: [MedicalSpecialties!]
  specialtyId: [String!]
  staffName: String!
  userId: String!
}

type Mutation {
  activeUser(id: String!): User!
  addBlockCustomerByProfileId(content: String!, customerId: String, facilityId: String, isBlock: Boolean = true, profileId: String, userId: String): MedicalFacilities!
  cancelRegister(id: String!): Register!
  cancelRegisterByAdmin(content: String!, id: String!): Register!
  confirmRegister(input: ConfirmRegisterInput!): Register!
  confirmRegisters(input: [ConfirmRegisterInput!]!): [Register!]!
  createBlog(input: CreateBlogInput!): Blog!
  createCustomer(input: CreateCustomerInput!): Customer!
  createDoctor(createDoctorInput: CreateDoctorInput!): Doctor!
  createEvaluate(input: CreateEvaluateInput!): Evaluate!
  createMedicalFacility(input: CreateMedicalFacilityInput!): MedicalFacilities!
  createMedicalSpecialty(input: CreateMedicalSpecialtyInput!): MedicalSpecialties!
  createMedicalStaff(input: CreateMedicalStaffInput!): MedicalStaff!
  createNotification(input: CreateNotificationInput!): Notification!
  createPackage(input: CreatePackageInput!): Package!
  createProfile(input: CreateProfileInput!): Profile!
  createRegisterDoctor(input: CreateRegisterDoctorInput!): Register!
  createRegisterPackage(input: CreateRegisterPackageInput!): Register!
  createRegisterSpecialty(input: CreateRegisterSpecialtyInput!): Register!
  createRegisterVaccine(input: CreateRegisterVaccineInput!): Register!
  createUserAndStaff(input: CreatUserAndStaffInput!): MedicalStaff!
  createVaccination(input: CreateVaccineInput!): Vaccination!
  deleteDoctor(id: String!): Doctor!
  deleteEvaluate(id: String!): Evaluate!
  deleteMecialSpecialty(id: String!): MedicalSpecialties!
  deleteMedicalFacility(input: String!): MedicalFacilities!
  deleteMedicalStaff(input: String!): MedicalStaff!
  deleteNotification(id: String!): Notification!
  deletePackage(input: String!): Package!
  deleteProfile(id: String!): Profile!
  deleteUnDeleteBlog(id: String!): Blog!
  deleteUser(id: String!): User!
  deleteUserAndDoctor(doctorId: String!, medicalFactilitiesId: String!): Doctor!
  deleteVaccination(input: String!): Vaccination!
  generateExcel: String!
  generateExcelRegisByOption(input: GetRegisterByOptionInput!): String!
  login(loginUserInput: LoginUserInput!): LoginRespone!
  logout: LogoutUser!
  seenAllNotification(userId: String!): String!
  seenNotificationById(id: String!): String!
  shareProfile(customerKey: String!, profileId: String!): Profile!
  signup(createUserInput: CreateUserInput!): User!
  signupAndCreateDoctor(input: CreateDoctorAndUserInput!): Doctor!
  signupUser(createUserInput: CreateUserByAdminInput!): User!
  updateBlog(input: UpdateBlogInput!): Blog!
  updateCustomer(input: UpdateCustomerInput!): Customer!
  updateDoctor(input: UpdateDoctorInput!): Doctor!
  updateEvaluate(input: UpdateEvaluateInput!): Evaluate!
  updateGeneralInfor(updateGeneralInforInput: GeneralInforUpdateInput!): GeneralInfor!
  updateMedicalFacility(input: UpdateMedicalFacilityInput!): MedicalFacilities!
  updateMedicalSpecialty(input: UpdateMedicalSpecialtyInput!): MedicalSpecialties!
  updateMedicalStaff(input: UpdateMedicalStaffInput!): MedicalStaff!
  updateNotification(input: UpdateNotificationInput!): Notification!
  updatePackage(input: UpdatePackageInput!): Package!
  updateProfile(input: UpdateProfileInput!): Profile!
  updateRegister(input: UpdateRegisterInput!): Register!
  updateRoles(updateRolesInput: UpdateRolesInput!): User!
  updateSetting(updateSettingInput: UpdateSettingInput!): Setting!
  updateUser(updateUserInput: UpdateUserInput!): User!
  updateUserAndDoctor(input: UpdateUserAndDoctorInput!): Doctor!
  updateUserAndStaff(input: UpdateUserAndStaffInput!): MedicalStaff!
  updateUserWithPass(updateUserInput: UpdateUserWithPassInput!): User!
  updateVaccination(input: UpdateVaccineInput!): Vaccination!
  uploadFileRegister(input: UpLoadFileRegisInput!): Register!
}

type Notification {
  content: String!
  createdAt: Float!
  detailPath: String!
  id: ID!
  status: ETypeOfNotification!
  userId: String!
}

type Package {
  examinationDetails: String!
  facility: MedicalFacilities
  gender: String!
  id: ID!
  image: LinkImage!
  medicalFactilitiesId: String!
  packageName: String!
  price: Float!
  registerCount(endTime: String!, isCancel: Boolean = false, isPending: Boolean = false, missed: Boolean = false, startTime: String!): Float
  workSchedule: WorkSchedule!
}

type Profile {
  address: String!
  customer: Customer
  customerId: String!
  dataOfBirth: DateTime!
  email: String!
  ethnic: String!
  fullname: String!
  gender: String!
  id: ID!
  identity: String
  job: String!
  medicalInsurance: String
  numberPhone: String!
  register(cancel: Boolean, stateRegis: String): [Register!]
  relationship: String!
  shares: [String!]
}

type Query {
  checklogin: User!
  checkloginCustomer: User!
  getAllBlogOfFacilityPagination(facilityId: String!, isDeleted: Boolean = false, limit: Float! = 10, page: Float! = 1, search: String, sortField: String = "priority", sortOrder: String = "desc"): [Blog!]!
  getAllBlogPagination(isDeleted: Boolean = false, limit: Float! = 10, page: Float! = 1, search: String, sortField: String = "priority", sortOrder: String = "desc"): [Blog!]!
  getAllBlogPaginationForClient(limit: Float! = 10, page: Float! = 1, search: String, sortField: String = "priority", sortOrder: String = "desc", type: String): [Blog!]!
  getAllCustomer: [Customer!]!
  getAllCustomerFromRegis(facilityId: String, limit: Float! = 10, page: Float! = 1, search: String, sortOrder: String = "desc", userId: String): [Customer!]!
  getAllCustomerFromRegisCount(facilityId: String, search: String = "", userId: String): Float!
  getAllCustomerPagination(limit: Float! = 10, page: Float! = 1, search: String, sortField: String = "fullname", sortOrder: String): [Customer!]!
  getAllDoctor: [Doctor!]!
  getAllDoctorByFacilityId(input: String!): [Doctor!]!
  getAllDoctorOfFacility(staffId: String = "", userId: String = ""): [Doctor!]!
  getAllDoctorPagination(limit: Float! = 10, page: Float! = 1, search: String, sortField: String = "doctorName", sortOrder: String): [Doctor!]!
  getAllDoctorPaginationOfFacility(filter: FilterDoctorInput, limit: Float! = 10, page: Float! = 1, sortField: String = "name", sortOrder: String, staffId: String = "", userId: String = ""): [Doctor!]!
  getAllDoctorPaginationOfFacilityForClient(facilityId: String!, filter: FilterDoctorInput, limit: Float! = 10, page: Float! = 1, sortField: String = "doctorName", sortOrder: String): [Doctor!]!
  getAllDoctorPending: [Doctor!]!
  getAllEvaluate: [Evaluate!]!
  getAllMecialSpecialty: [MedicalSpecialties!]!
  getAllMedicalFacility: [MedicalFacilities!]!
  getAllMedicalFacilityHaveSrvPaginationForClient(limit: Float! = 10, page: Float! = 1, search: String, sortField: String = "medicalFacilityName", sortOrder: String, type: String): [MedicalFacilities!]!
  getAllMedicalFacilityPagination(limit: Float! = 10, page: Float! = 1, search: String, sortField: String = "medicalFacilityName", sortOrder: String, type: String): [MedicalFacilities!]!
  getAllMedicalFacilityPaginationForClient(limit: Float! = 10, page: Float! = 1, search: String, searchField: String = "medicalFacilityName", sortField: String = "medicalFacilityName", sortOrder: String, type: String): [MedicalFacilities!]!
  getAllMedicalSpecialtiesOfFacility(staffId: String = "", userId: String = ""): [MedicalSpecialties!]!
  getAllMedicalSpecialtiesPaginationByStaff(limit: Float! = 10, page: Float! = 1, search: String, sortField: String = "name", sortOrder: String, staffId: String!): [MedicalSpecialties!]!
  getAllMedicalSpecialtiesPaginationOfFacility(limit: Float! = 10, page: Float! = 1, search: String, sortField: String = "name", sortOrder: String, staffId: String = "", userId: String = ""): [MedicalSpecialties!]!
  getAllMedicalSpecialtiesPaginationOfFacilityForClient(facilityId: String!, limit: Float! = 10, page: Float! = 1, search: String, sortField: String = "name", sortOrder: String): [MedicalSpecialties!]!
  getAllMedicalStaff: [MedicalStaff!]!
  getAllMedicalStaffPaginationOfFacility(facilityId: String, limit: Float! = 10, page: Float! = 1, search: String, sortField: String = "name", sortOrder: String, userId: String): [MedicalStaff!]!
  getAllNotification: [Notification!]!
  getAllNotificationByUserId(userId: String!): [Notification!]!
  getAllPackage: [Package!]!
  getAllPackageByFacilityId(input: String!): [Package!]!
  getAllPackageOfFacility(staffId: String = "", userId: String = ""): [Package!]!
  getAllPackagePaginationByStaff(limit: Float! = 10, page: Float! = 1, search: String, sortField: String = "packageName", sortOrder: String, staffId: String): [Package!]!
  getAllPackagePaginationOfFacility(limit: Float! = 10, page: Float! = 1, search: String, sortField: String = "packageName", sortOrder: String, staffId: String, userId: String): [Package!]!
  getAllPackagePaginationOfFacilityForClient(facilityId: String!, limit: Float! = 10, page: Float! = 1, search: String, sortField: String = "packageName", sortOrder: String): [Package!]!
  getAllPackageSelect(input: String!): [Package!]!
  getAllProfile: [Profile!]!
  getAllRegisCountByOption(input: GetRegisterByOptionInput!): Register!
  getAllRegisOfService(input: GetRegisterHaveInput!): [Register!]!
  getAllRegisPending(input: GetRegisPendingInput!, limit: Float! = 10, missed: Boolean = false, page: Float! = 1, search: String): [Register!]!
  getAllRegisPendingCount(input: GetRegisPendingInput!): Float!
  getAllRegisterByOption(input: GetRegisterByOptionInput!): [Register!]!
  getAllStaffPagination(limit: Float! = 10, page: Float! = 1, search: String, sortField: String = "name", sortOrder: String): [MedicalStaff!]!
  getAllUsersPagination(limit: Float! = 10, page: Float! = 1, role: String, search: String, sortField: String = "username", sortOrder: String): [User!]!
  getAllVacation: [Vaccination!]!
  getAllVaccinationByFacilityId(input: String!): [Vaccination!]!
  getAllVaccinationOfFacility(staffId: String = "", userId: String = ""): [Vaccination!]!
  getAllVaccinationPaginationByStaff(limit: Float! = 10, page: Float! = 1, search: String, sortField: String = "name", sortOrder: String, staffId: String): [Vaccination!]!
  getAllVaccinationPaginationOfFacility(limit: Float! = 10, page: Float! = 1, search: String, sortField: String = "vaccineName", sortOrder: String, staffId: String = "", userId: String = ""): [Vaccination!]!
  getAllVaccinationPaginationOfFacilityForClient(facilityId: String!, limit: Float! = 10, page: Float! = 1, search: String, sortField: String = "vaccineName", sortOrder: String): [Vaccination!]!
  getAllVaccinationSelect(input: String!): [Vaccination!]!
  getBlogBySlug(slug: String!): Blog!
  getDoctorbyId(id: String!): Doctor!
  getDoctorbyUserId(id: String!): Doctor!
  getEvaluateById(id: String!): Evaluate!
  getEvaluateByOption(option: GetEvaluateOptionInput!): [Evaluate!]!
  getEvaluateByRegisId(regisId: String!): Evaluate!
  getGeneralInfor: GeneralInfor!
  getMedicalFacilityById(id: String!): MedicalFacilities!
  getMedicalFacilityInfo(staffId: String = "", userId: String = ""): MedicalFacilities!
  getMedicalSpecialtiesByMedicalFacilityId(input: String!): [MedicalSpecialties!]!
  getMedicalSpecialtyById(input: String!): MedicalSpecialties!
  getMedicalSpecialtySelect(input: String!): [MedicalSpecialties!]!
  getMedicalStaffByFacilityId(input: String!): [MedicalStaff!]!
  getMedicalStaffById(input: String!): MedicalStaff!
  getMedicalStaffByUserId(input: String!): MedicalStaff!
  getPackageById(input: String!): Package!
  getProfileByCustomerId(id: String!): [Profile!]!
  getProfileByCustomerKey(customerKey: String!): [Profile!]!
  getProfileById(id: String!): Profile!
  getProfiles(id: String!): Profile!
  getRegisById(id: String!): Register!
  getRegisHistory(profileId: String!, staffId: String = "", userId: String = ""): [Register!]!
  getSetting: Setting!
  getTopMedicalFacilities(limit: Float! = 10, typeFacility: String!): [MedicalFacilities!]!
  getTotalBlogsCount(isDeleted: Boolean = false, search: String): Float!
  getTotalBlogsCountForClient(search: String, type: String): Float!
  getTotalCustomersCount(search: String): Float!
  getTotalDoctorsCount(filter: FilterDoctorInput, staffId: String = "", userId: String = ""): Float!
  getTotalDoctorsCountForClient(facilityId: String!, filter: FilterDoctorInput): Float!
  getTotalFacilitiesCount(search: String, type: String): Float!
  getTotalFacilitiesCountForClient(search: String, searchField: String = "medicalFacilityName", type: String): Float!
  getTotalFacilitiesHaveSrvCountForClient(search: String, type: String): Float!
  getTotalMedicalSpecialtiesCount(search: String, staffId: String = "", userId: String = ""): Float!
  getTotalMedicalSpecialtiesCountForClient(facilityId: String!, search: String): Float!
  getTotalPackagesCount(search: String, staffId: String = "", userId: String = ""): Float!
  getTotalPackagesCountForClient(facilityId: String = "", search: String): Float!
  getTotalVaccinationsCount(search: String, staffId: String = "", userId: String = ""): Float!
  getTotalVaccinationsCountForClient(facilityId: String!, search: String): Float!
  getUser(username: String!): User!
  getUserDoctorPending: [User!]!
  getUserDoctorPendingUpdate(input: String!): [User!]!
  getUserFacilitySelect(input: String!): [User!]!
  getUserMedicalNon: [User!]!
  getUserSelect(roleInput: UserSelectInput!): [User!]!
  getUserSelected(id: String!): User!
  getUserStaffSelect(input: String!): [User!]!
  getVaccineById(input: String!): Vaccination!
  totalStaffsCount(facilityId: String, search: String, userId: String = ""): Float!
  totalUsersCount(search: String): Float!
  users: [User!]!
}

input RegisPendingInput {
  cancel: Boolean!
  doctorIds: [String!]!
  endTime: String!
  packageIds: [String!]!
  specialtyIds: [String!]!
  startTime: String!
  typeOfService: ETypeOfService
  vaccineIds: [String!]!
}

type Register {
  cancel: Boolean!
  createRegisBy: Customer
  createdAt: DateTime!
  createdBy: String
  date: DateTime!
  doctor: Doctor
  doctorId: String
  files: [LinkImage!]
  id: ID!
  note: String
  package: Package
  packageId: String
  profile: Profile
  profileId: String!
  session: Session!
  specialty: MedicalSpecialties
  specialtyId: String
  state: String!
  typeOfService: String!
  vaccination: Vaccination
  vaccineId: String
  warning: Float
  warningThisMonth: Float
}

enum Role {
  Admin
  Customer
  Doctor
  Facility
  Staff
}

type Schedule {
  dayOfWeek: String!
  sessions: [Session!]!
}

input ScheduleInput {
  dayOfWeek: EDayOfWeed!
  sessions: [SessionInput!]!
}

type Session {
  endTime: String!
  exceptions: [Exception!]
  startTime: String!
}

input SessionInput {
  endTime: String!
  exceptions: [ExceptionInput!]
  startTime: String!
}

type Setting {
  defaultLang: String!
}

type Subscription {
  notifyCreated(userId: String!): Notification!
  registerCreated(option: GetRegisterByOptionInput!): Register!
  registerPendingCreated(option: RegisPendingInput!): Register!
}

input UpLoadFileRegisInput {
  files: [LinkImageInput!]
  id: String!
}

input UpdateBlogInput {
  content: String
  deletedAt: Float
  deletedBy: UserSlimInput
  id: ID!
  keywords: String
  mainPhoto: LinkImageInput
  priority: Float
  shortContent: String!
  slug: String
  status: EnumBlogStatus
  title: String
  type: EnumBlogType
  updatedAt: Float
  updatedBy: UserSlimInput
}

input UpdateCustomerInput {
  address: String!
  dateOfBirth: DateTime!
  email: String!
  ethnic: String!
  fullname: String!
  gender: EGender!
  id: String!
  numberPhone: String!
}

input UpdateDoctorInput {
  academicTitle: EAcademicTitle
  avatar: LinkImageInput!
  degree: EDegree!
  discription: String!
  doctorName: String!
  email: String!
  gender: EGender!
  id: String!
  medicalFactilitiesId: String!
  numberPhone: String!
  price: Float!
  specialistId: String!
  userId: String
  workSchedule: WorkScheduleInput!
}

input UpdateEvaluateInput {
  comment: String!
  id: String!
  rating: Float!
}

input UpdateMedicalFacilityInput {
  address: String!
  dateOff: [DateTime!]
  discription: String!
  email: String!
  id: String!
  image: LinkImageInput!
  introduce: String!
  lat: Float
  legalRepresentation: String!
  lng: Float
  logo: LinkImageInput!
  medicalFacilityName: String!
  numberPhone: String!
  operatingStatus: String!
  schedule: String!
  status: EStatusService!
  taxCode: String!
  typeOfFacility: ETypeOfFacility!
  userId: String!
}

input UpdateMedicalSpecialtyInput {
  discription: String!
  id: String!
  medicalFactilityId: String!
  price: Float!
  specialtyName: String!
  workSchedule: WorkScheduleInput
}

input UpdateMedicalStaffInput {
  email: String!
  gender: EGender!
  id: String!
  medicalFacilityId: String!
  numberPhone: String!
  permissions: [EPermission!]!
  specialtyId: [String!]
  staffName: String!
  userId: String
}

input UpdateNotificationInput {
  content: String!
  detailPath: String!
  id: String!
  status: ETypeOfNotification!
  userId: String!
}

input UpdatePackageInput {
  examinationDetails: String!
  gender: EGenderPackage!
  id: String!
  image: LinkImageInput!
  medicalFactilitiesId: String!
  packageName: String!
  price: Float!
  workSchedule: WorkScheduleInput!
}

input UpdateProfileInput {
  address: String
  dataOfBirth: DateTime
  email: String
  ethnic: String
  fullname: String
  gender: EGender!
  id: String!
  identity: String
  job: String
  medicalInsurance: String
  numberPhone: String
  relationship: String
}

input UpdateRegisterInput {
  cancel: Boolean!
  id: String!
  state: EStateRegister!
}

input UpdateRolesInput {
  id: String!
  roles: [Role!]!
}

input UpdateSettingInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input UpdateUserAndDoctorInput {
  academicTitle: EAcademicTitle
  avatar: LinkImageInput!
  degree: EDegree!
  discription: String!
  doctorName: String!
  email: String!
  gender: EGender!
  id: String!
  medicalFactilitiesId: String!
  numberPhone: String!
  password: String
  price: Float!
  specialistId: String!
  userId: String
  username: String!
  workSchedule: WorkScheduleInput!
}

input UpdateUserAndStaffInput {
  email: String!
  gender: EGender!
  id: String!
  medicalFacilityId: String!
  numberPhone: String!
  password: String
  permissions: [EPermission!]!
  specialtyId: [String!]
  staffName: String!
  userId: String
}

input UpdateUserInput {
  active: Boolean
  avatar: LinkImageInput
  email: String
  id: String!
  username: String
}

input UpdateUserWithPassInput {
  active: Boolean
  avatar: LinkImageInput
  email: String!
  id: String!
  password: String!
  passwordNew: String!
  username: String!
}

input UpdateVaccineInput {
  countryOfOrigin: String!
  id: String!
  indication: String!
  medicalFactilitiesId: String!
  note: String!
  price: Float!
  prophylactic: String!
  vaccineName: String!
  workSchedule: WorkScheduleInput!
}

type User {
  active: Boolean
  avatar: LinkImage
  customer: Customer
  doctor: Doctor
  email: String!
  id: ID!
  medicalFacilities: MedicalFacilities
  password: String!
  roles: [String!]
  username: String!
}

input UserSelectInput {
  role: Role!
}

type UserSlimEntity {
  role: String!
  showName: String!
  username: String!
}

input UserSlimInput {
  role: String!
  showName: String!
  username: String!
}

type Vaccination {
  countryOfOrigin: String!
  facility: MedicalFacilities
  id: ID!
  indication: String!
  medicalFactilitiesId: String!
  note: String!
  price: Float!
  prophylactic: String!
  registerCount(endTime: String!, isCancel: Boolean = false, isPending: Boolean = false, missed: Boolean = false, startTime: String!): Float
  vaccineName: String!
  workSchedule: WorkSchedule!
}

type WorkSchedule {
  dayOff: [DateTime!]!
  numberSlot: Float!
  schedule: [Schedule!]!
  status: String!
}

input WorkScheduleInput {
  dayOff: [DateTime!]!
  numberSlot: Float!
  schedule: [ScheduleInput!]!
  status: EStatusService!
}